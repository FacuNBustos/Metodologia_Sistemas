13/09 Facundo nombró de nuevo la rama principal a master, tuve que borrar la carpeta anterior Metodología _Sistemas, clonarla nuevo y volver a crear una nueva rama para yo trabajar en ella (ramaPaoloGamarra).
Estoy anotando todo lo necesario. 
RECORDATORIO!!!
* Acordarse de la daily mía
*la issue que me toca (#7) moverla al estado "en progreso"
*commits el comentario en inglés
 Creo que estoy para arrancar...

 17/09/22
 Hoy voy a crear el repositorio de la entidad "Passenger", para eso también hay que crear las carpetas con la ruta server/src/infraestructure/repositories/passenger.repository.ts. Este repositoio tendrá dos métodos "save" y "FindOneByIdentutyCard".
 Creo la nueva rama CreatePassengerRepository, desde esa rama trabajaré. En github muevo la tarea que me tocó a "en preoceso"

Puntos clave dados por Facundo en github:

Definir la clase "passengerRepository".

P: Declarar un atributo privado de tipo "Passenger[]", para utilizar de almacenamiento local. Pensar porque privado y no publico, y porque de tipo "Passenger[]".

R: Un array de tipo "Passenger" privado por las dudas haya algún cambio.

P: Declarar su constructor y pensar porque se declara al atributo como vacío.
Si no comprende asincronismo, leer la documentación oficial de Mozilla

R: Vacío porque vamos a guardar por ahora en memoria.

P: Declarar un método asíncrona "save" para guardar y sobrescribir datos. Teniendo en cuenta que en typescript debemos indicar que tipo de dato devolvera o no nuestra promesa (promise).
EJ: Promise<void> [ una promesa que no devuelve nada ]

R: Me tuve que meter en las configuraciones de typescript tsconfig.json, descomentar línea 9 y 10 y agregar "lib": ["ES2015"], /* Specify library files to be included in the ....
 
P: Declarar un metodo asincrono "findOneByIdentityCard" para buscar un passenger por su DNI (id card). Muy similar al "findOneById" del ejemplo dado por los profesores.

R:hecho

P: Por ultimo exportar por defecto una instancia de la clase.
EJ: export default new nombreClase(); y el porque de exportarlo de dicha forma.

R: Para exportar funciones, objetos o tipos de dato primitivos del módulo para que puedan ser utilizados por otros programas con la sentencia import.

Una vez terminado. pushear los cambios, hacer un pull request poniendo a facu que revise y si está todo ok merge...

19/03 (PUNTOS = 8) Generar el comando para crear “passengers”#9
Puntos claves:

Entender que es un comando y cual es su finalidad. Se anexa documentacion que puede consultar.
Definir una clase que usaremos como comando, en vez de una interface. En la misma definir aquellos atributos que necesitaremos para realizar la acción para la que esta creada. En este caso CREAR una entidad de pasajero. Tendrás que identificar cuales son necesarios para su creación.
Definir el constructor de la clase y dentro del mismo una pequeña comprobación de si los datos que ingresan existen.
Por ultimo definir todos los getter de cada uno de los atributos de nuestro comando.
Exportar la clase (Importante NO POR DEFECTO).
Se anexa una documentación oficial de importaciones de Mozilla

07/10/2022 SPRINT 2. #30 Accommodation Entity y #31 Accommodation Repository
Se parte creando una nueva rama para cada tarea. Releer el print 1 para los pasos

Accommodation Entity:
Atributos:
  id (string)
  name (string)
  pricePerNight: (number)

Accommodation Repository
  Debe tener el método “save”
  Debe tener el método “findOneById”
  Debe tener el método “findOneByName”